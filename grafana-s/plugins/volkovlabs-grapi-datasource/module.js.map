{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./constants/tests.ts","webpack:///./constants/annotations.ts","webpack:///./constants/datasource.ts","webpack:///./constants/messages.ts","webpack:///./constants/request.ts","webpack:///./constants/query.ts","webpack:///./components/QueryEditor/QueryEditor.tsx","webpack:///../node_modules/compare-versions/lib/esm/utils.js","webpack:///../node_modules/compare-versions/lib/esm/compare.js","webpack:///../node_modules/compare-versions/lib/esm/satisfies.js","webpack:///../node_modules/compare-versions/lib/esm/compareVersions.js","webpack:///./utils/frame.ts","webpack:///./utils/logger.ts","webpack:///./utils/notifications.ts","webpack:///./utils/api.ts","webpack:///./api/base.ts","webpack:///./api/annotations.ts","webpack:///./api/datasources.ts","webpack:///./api/health.ts","webpack:///./api/org.ts","webpack:///./api/provisioning.ts","webpack:///./api/api.ts","webpack:///./datasource/variable.ts","webpack:///./datasource/datasource.ts","webpack:///./module.ts","webpack:///./components/ConfigEditor/ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Tests Identifiers\n */\nexport const TestIds = {\n  configEditor: {\n    fieldToken: 'data-testid config-editor field-token',\n    fieldUrl: 'data-testid config-editor field-url',\n    fieldRequestMode: 'data-testid config-editor field-request-mode',\n    fieldRequestModelOption: (name: string) => `config-editor field-request-mode-option-${name}`,\n  },\n  queryEditor: {\n    fieldAnnotationDashboardContainer: 'data-testid query-editor field-annotation-dashboard-container',\n    fieldAnnotationDashboardOption: (name: string) => `query-editor field-annotation-dashboard-option-${name}`,\n    fieldAnnotationRulesContainer: 'data-testid query-editor field-annotation-rules-container',\n    fieldAnnotationRulesOption: (name: boolean) => `query-editor field-annotation-rules-option-${name}`,\n    fieldAnnotationLimit: 'data-testid query-editor field-annotation-limit',\n    fieldAnnotationNewStateContainer: 'data-testid query-editor field-annotation-new-state-container',\n    fieldAnnotationPattern: 'data-testid query-editor field-annotation-pattern',\n    fieldAnnotationPrevStateContainer: 'data-testid query-editor field-annotation-prev-state-container',\n    fieldAnnotationStateOption: (name: string) => `query-editor field-annotation-state-option-${name}`,\n    fieldAnnotationTimeRangeContainer: 'data-testid query-editor field-annotation-time-range-container',\n    fieldAnnotationTimeRangeOption: (name: string) => `query-editor field-annotation-time-range-option-${name}`,\n    fieldAnnotationTypeContainer: 'data-testid query-editor field-annotation-type-container',\n    fieldAnnotationTypeOption: (name: string) => `query-editor field-annotation-type-option-${name}`,\n    fieldRequest: 'query-editor field-request',\n  },\n};\n","import { SelectableValue } from '@grafana/data';\nimport { TestIds } from './tests';\n\n/**\n * Annotation Types\n */\nexport enum AnnotationType {\n  ALL = '',\n  ANNOTATION = 'annotation',\n  ALERT = 'alert',\n}\n\n/**\n * Annotation Dashboard\n */\nexport enum AnnotationDashboard {\n  ALL = '',\n  THIS = 'this',\n}\n\n/**\n * Annotation Range\n */\nexport enum AnnotationRange {\n  NONE = '',\n  SELECTED = 'selected',\n}\n\n/**\n * Annotation State\n */\nexport enum AnnotationState {\n  ALL = '',\n  NORMAL = 'Normal',\n  PENDING = 'Pending',\n  ALERTING = 'Alerting',\n}\n\n/**\n * Annotations Types\n *\n * @type {SelectableValue[]}\n */\nexport const AnnotationTypeOptions: SelectableValue[] = [\n  {\n    label: 'All',\n    value: AnnotationType.ALL,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationTypeOption(AnnotationType.ALL),\n  },\n  {\n    label: 'Annotation',\n    value: AnnotationType.ANNOTATION,\n    icon: 'comment-alt-message',\n    ariaLabel: TestIds.queryEditor.fieldAnnotationTypeOption(AnnotationType.ANNOTATION),\n  },\n  {\n    label: 'Alert',\n    value: AnnotationType.ALERT,\n    icon: 'bell',\n    ariaLabel: TestIds.queryEditor.fieldAnnotationTypeOption(AnnotationType.ALERT),\n  },\n];\n\n/**\n * Annotations Dashboard\n *\n * @type {SelectableValue[]}\n */\nexport const AnnotationDashboardOptions: SelectableValue[] = [\n  {\n    label: 'All',\n    value: AnnotationDashboard.ALL,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationDashboardOption(AnnotationDashboard.ALL),\n  },\n  {\n    label: 'This',\n    value: AnnotationDashboard.THIS,\n    icon: 'dashboard',\n    ariaLabel: TestIds.queryEditor.fieldAnnotationDashboardOption(AnnotationDashboard.THIS),\n  },\n];\n\n/**\n * Annotations Range\n *\n * @type {SelectableValue[]}\n */\nexport const AnnotationRangeOptions: SelectableValue[] = [\n  {\n    label: 'None',\n    value: AnnotationRange.NONE,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationTimeRangeOption(AnnotationRange.NONE),\n  },\n  {\n    label: 'Selected',\n    value: AnnotationRange.SELECTED,\n    icon: 'calendar-alt',\n    ariaLabel: TestIds.queryEditor.fieldAnnotationTimeRangeOption(AnnotationRange.SELECTED),\n  },\n];\n\n/**\n * Annotations States\n *\n * @type {SelectableValue[]}\n */\nexport const AnnotationStateOptions: SelectableValue[] = [\n  {\n    label: 'All',\n    value: AnnotationState.ALL,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationStateOption(AnnotationState.ALL),\n  },\n  {\n    label: 'Normal',\n    value: AnnotationState.NORMAL,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationStateOption(AnnotationState.NORMAL),\n  },\n  {\n    label: 'Pending',\n    value: AnnotationState.PENDING,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationStateOption(AnnotationState.PENDING),\n  },\n  {\n    label: 'Alerting',\n    value: AnnotationState.ALERTING,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationStateOption(AnnotationState.ALERTING),\n  },\n];\n\n/**\n * Annotations Alert Rules\n *\n * @type {SelectableValue[]}\n */\nexport const AnnotationRulesOptions: SelectableValue[] = [\n  {\n    label: 'Enabled',\n    value: true,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationRulesOption(true),\n  },\n  {\n    label: 'Disabled',\n    value: false,\n    ariaLabel: TestIds.queryEditor.fieldAnnotationRulesOption(false),\n  },\n];\n","import { TestIds } from './tests';\n\n/**\n * Data Source test status\n */\nexport enum DataSourceTestStatus {\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n/**\n * Request Mode\n */\nexport enum RequestMode {\n  LOCAL = 'local',\n  REMOTE = 'remote',\n}\n\n/**\n * Request Mode Options\n */\nexport const RequestModeOptions = [\n  {\n    label: 'Local',\n    value: RequestMode.LOCAL,\n    ariaLabel: TestIds.configEditor.fieldRequestModelOption(RequestMode.LOCAL),\n  },\n  {\n    label: 'Remote',\n    value: RequestMode.REMOTE,\n    ariaLabel: TestIds.configEditor.fieldRequestModelOption(RequestMode.REMOTE),\n  },\n];\n","/**\n * Api\n */\nexport const api = {\n  getAlertRulesFailed: 'Get Alert Rules: API Request failed. See Console for details.',\n  getAnnotationsFailed: 'Get Annotations: API Request failed. See Console for details.',\n  getDataSourcesFailed: 'Get Data Sources: API Request failed. See Console for details.',\n  getHealthFailed: 'Get Health: API Request failed. See Console for details.',\n  getOrgFailed: 'Get Org: API Request failed. See Console for details.',\n  getUsersFailed: 'Get Users: API Request failed. See Console for details.',\n};\n\n/**\n * Messages\n */\nexport const Messages = {\n  api,\n  connectedToOrg: 'Connected to',\n  connectionError: 'Error. Not able connect.',\n  error: 'Error',\n  requestAlertRules: 'Returns alert rules',\n  requestAnnotations: 'Returns annotations',\n  requestDataSources: 'Returns data sources',\n  requestHealth: 'Returns health information',\n  requestNone: 'For internal API calls',\n  requestOrgUsers: 'Returns all users within the current organization',\n  version: 'Version',\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Messages } from './messages';\n\n/**\n * Request Type Values\n */\nexport enum RequestType {\n  ALERT_RULES = 'alertRules',\n  ANNOTATIONS = 'annotations',\n  DATASOURCES = 'datasources',\n  HEALTH = 'health',\n  NONE = 'none',\n  ORG_USERS = 'orgUsers',\n}\n\n/**\n * Request Type\n *\n * @type {SelectableValue[]}\n */\nexport const RequestTypeOptions: Array<SelectableValue<RequestType>> = [\n  {\n    label: 'Alert Rules',\n    description: Messages.requestAlertRules,\n    value: RequestType.ALERT_RULES,\n  },\n  {\n    label: 'Annotations',\n    description: Messages.requestAnnotations,\n    value: RequestType.ANNOTATIONS,\n  },\n  {\n    label: 'Data Sources',\n    description: Messages.requestDataSources,\n    value: RequestType.DATASOURCES,\n  },\n  {\n    label: 'Health information',\n    description: Messages.requestHealth,\n    value: RequestType.HEALTH,\n  },\n  {\n    label: 'Organization Users',\n    description: Messages.requestOrgUsers,\n    value: RequestType.ORG_USERS,\n  },\n  {\n    label: 'None',\n    description: Messages.requestNone,\n    value: RequestType.NONE,\n  },\n];\n","import { Query } from '../types';\nimport { AnnotationDashboard, AnnotationRange, AnnotationState, AnnotationType } from './annotations';\nimport { RequestType } from './request';\n\n/**\n * Defaults for Query\n */\nexport const DefaultQuery: Partial<Query> = {\n  annotationDashboard: AnnotationDashboard.ALL,\n  annotationLimit: 100,\n  annotationNewState: AnnotationState.ALL,\n  annotationPattern: '',\n  annotationPrevState: AnnotationState.ALL,\n  annotationRange: AnnotationRange.NONE,\n  annotationRules: true,\n  annotationType: AnnotationType.ALL,\n  requestType: RequestType.NONE,\n};\n","import { defaults } from 'lodash';\nimport React, { FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, RadioButtonGroup, Select } from '@grafana/ui';\nimport {\n  AnnotationDashboard,\n  AnnotationDashboardOptions,\n  AnnotationRange,\n  AnnotationRangeOptions,\n  AnnotationRulesOptions,\n  AnnotationState,\n  AnnotationStateOptions,\n  AnnotationType,\n  AnnotationTypeOptions,\n  DefaultQuery,\n  RequestType,\n  RequestTypeOptions,\n  TestIds,\n} from '../../constants';\nimport { DataSource } from '../../datasource';\nimport { DataSourceOptions, Query } from '../../types';\n\n/**\n * Editor Properties\n */\ntype Props = QueryEditorProps<DataSource, Query, DataSourceOptions>;\n\n/**\n * Query Editor\n */\nexport const QueryEditor: React.FC<Props> = ({ onChange, onRunQuery, query: rawQuery, datasource }) => {\n  /**\n   * Initialized\n   */\n  const [isInitialized, setInitialized] = useState(false);\n\n  /**\n   * Initialize Data Source\n   */\n  useEffect(() => {\n    if (!isInitialized) {\n      onRunQuery();\n      setInitialized(true);\n    }\n  }, [isInitialized, onRunQuery]);\n\n  /**\n   * Request Type change\n   */\n  const onRequestTypeChange = useCallback(\n    async (item: SelectableValue<RequestType>) => {\n      onChange({ ...rawQuery, requestType: item.value! });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Type change\n   */\n  const onAnnotationTypeChange = useCallback(\n    async (type: AnnotationType) => {\n      onChange({ ...rawQuery, annotationType: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Dashboard change\n   */\n  const onAnnotationDashboardChange = useCallback(\n    async (type: AnnotationDashboard) => {\n      onChange({ ...rawQuery, annotationDashboard: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Rules change\n   */\n  const onAnnotationRulesChange = useCallback(\n    async (type: boolean) => {\n      onChange({ ...rawQuery, annotationRules: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Range change\n   */\n  const onAnnotationRangeChange = useCallback(\n    async (type: AnnotationRange) => {\n      onChange({ ...rawQuery, annotationRange: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Pattern change\n   */\n  const onAnnotationPatternChange = useCallback(\n    async (event: FormEvent<HTMLInputElement>) => {\n      onChange({ ...rawQuery, annotationPattern: event.currentTarget.value! });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Limit change\n   */\n  const onAnnotationLimitChange = useCallback(\n    async (event: FormEvent<HTMLInputElement>) => {\n      onChange({ ...rawQuery, annotationLimit: Number(event.currentTarget.value)! });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation Prev State change\n   */\n  const onAnnotationPrevStateChange = useCallback(\n    async (type: AnnotationState) => {\n      onChange({ ...rawQuery, annotationPrevState: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Annotation New State change\n   */\n  const onAnnotationNewStateChange = useCallback(\n    async (type: AnnotationState) => {\n      onChange({ ...rawQuery, annotationNewState: type });\n      onRunQuery();\n    },\n    [onChange, onRunQuery, rawQuery]\n  );\n\n  /**\n   * Default Query\n   */\n  const query = defaults(rawQuery, DefaultQuery);\n\n  /**\n   * Available Request Types\n   */\n  const availableRequestTypes = useMemo(() => {\n    return RequestTypeOptions.filter((option) =>\n      datasource.api.availableRequestTypes.some(\n        (supported) => supported === option.value || option.value === RequestType.NONE\n      )\n    );\n  }, [datasource.api.availableRequestTypes]);\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField grow label=\"Request\" labelWidth={10}>\n          <Select\n            options={availableRequestTypes}\n            value={query.requestType}\n            onChange={onRequestTypeChange}\n            aria-label={TestIds.queryEditor.fieldRequest}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {query.requestType === RequestType.ANNOTATIONS && (\n        <>\n          <InlineFieldRow>\n            <InlineField label=\"Type\" labelWidth={10} data-testid={TestIds.queryEditor.fieldAnnotationTypeContainer}>\n              <RadioButtonGroup\n                options={AnnotationTypeOptions}\n                value={AnnotationTypeOptions.find((type) => type.value === query.annotationType)?.value}\n                onChange={onAnnotationTypeChange}\n              />\n            </InlineField>\n\n            <InlineField\n              label=\"Dashboards\"\n              labelWidth={10}\n              data-testid={TestIds.queryEditor.fieldAnnotationDashboardContainer}\n            >\n              <RadioButtonGroup\n                options={AnnotationDashboardOptions}\n                value={AnnotationDashboardOptions.find((type) => type.value === query.annotationDashboard)?.value}\n                onChange={onAnnotationDashboardChange}\n              />\n            </InlineField>\n\n            <InlineField\n              label=\"Time Range\"\n              labelWidth={12}\n              data-testid={TestIds.queryEditor.fieldAnnotationTimeRangeContainer}\n            >\n              <RadioButtonGroup\n                options={AnnotationRangeOptions}\n                value={AnnotationRangeOptions.find((type) => type.value === query.annotationRange)?.value}\n                onChange={onAnnotationRangeChange}\n              />\n            </InlineField>\n          </InlineFieldRow>\n\n          {query.annotationType === AnnotationType.ALERT && (\n            <InlineFieldRow>\n              <InlineField\n                label=\"Prev State\"\n                labelWidth={10}\n                data-testid={TestIds.queryEditor.fieldAnnotationPrevStateContainer}\n              >\n                <RadioButtonGroup\n                  options={AnnotationStateOptions}\n                  value={AnnotationStateOptions.find((type) => type.value === query.annotationPrevState)?.value}\n                  onChange={onAnnotationPrevStateChange}\n                />\n              </InlineField>\n              <InlineField\n                label=\"New State\"\n                labelWidth={10}\n                data-testid={TestIds.queryEditor.fieldAnnotationNewStateContainer}\n              >\n                <RadioButtonGroup\n                  options={AnnotationStateOptions}\n                  value={AnnotationStateOptions.find((type) => type.value === query.annotationNewState)?.value}\n                  onChange={onAnnotationNewStateChange}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          )}\n\n          <InlineFieldRow>\n            <InlineField label=\"Text Pattern\" labelWidth={20} grow tooltip=\"Regex format. Support variables.\">\n              <Input\n                value={query.annotationPattern}\n                onChange={onAnnotationPatternChange}\n                data-testid={TestIds.queryEditor.fieldAnnotationPattern}\n              />\n            </InlineField>\n            <InlineField label=\"Max Limit\" labelWidth={10}>\n              <Input\n                type=\"number\"\n                value={query.annotationLimit}\n                onChange={onAnnotationLimitChange}\n                data-testid={TestIds.queryEditor.fieldAnnotationLimit}\n              />\n            </InlineField>\n          </InlineFieldRow>\n\n          {query.annotationType !== AnnotationType.ANNOTATION && (\n            <InlineFieldRow>\n              <InlineField\n                label=\"Add Alert fields\"\n                tooltip=\"Add Alert Name and Alert UID from provisioned alert rules\"\n                labelWidth={20}\n                data-testid={TestIds.queryEditor.fieldAnnotationRulesContainer}\n              >\n                <RadioButtonGroup\n                  options={AnnotationRulesOptions}\n                  value={query.annotationRules}\n                  onChange={onAnnotationRulesChange}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","export const semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\nexport const validateAndParse = (version) => {\n    if (typeof version !== 'string') {\n        throw new TypeError('Invalid argument expected string');\n    }\n    const match = version.match(semver);\n    if (!match) {\n        throw new Error(`Invalid argument not valid semver ('${version}' received)`);\n    }\n    match.shift();\n    return match;\n};\nconst isWildcard = (s) => s === '*' || s === 'x' || s === 'X';\nconst tryParse = (v) => {\n    const n = parseInt(v, 10);\n    return isNaN(n) ? v : n;\n};\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\nconst compareStrings = (a, b) => {\n    if (isWildcard(a) || isWildcard(b))\n        return 0;\n    const [ap, bp] = forceType(tryParse(a), tryParse(b));\n    if (ap > bp)\n        return 1;\n    if (ap < bp)\n        return -1;\n    return 0;\n};\nexport const compareSegments = (a, b) => {\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        const r = compareStrings(a[i] || '0', b[i] || '0');\n        if (r !== 0)\n            return r;\n    }\n    return 0;\n};\n//# sourceMappingURL=utils.js.map","import { compareVersions } from './compareVersions';\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1, v2, operator) => {\n    // validate input operator\n    assertValidOperator(operator);\n    // since result of compareVersions can only be -1 or 0 or 1\n    // a simple map can be used to replace switch\n    const res = compareVersions(v1, v2);\n    return operatorResMap[operator].includes(res);\n};\nconst operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1],\n    '!=': [-1, 1],\n};\nconst allowedOperators = Object.keys(operatorResMap);\nconst assertValidOperator = (op) => {\n    if (typeof op !== 'string') {\n        throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);\n    }\n    if (allowedOperators.indexOf(op) === -1) {\n        throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);\n    }\n};\n//# sourceMappingURL=compare.js.map","import { compare } from './compare';\nimport { compareSegments, validateAndParse } from './utils';\n/**\n * Match [npm semver](https://docs.npmjs.com/cli/v6/using-npm/semver) version range.\n *\n * @param version Version number to match\n * @param range Range pattern for version\n * @returns `true` if the version number is within the range, `false` otherwise.\n *\n * @example\n * ```\n * satisfies('1.1.0', '^1.0.0'); // return true\n * satisfies('1.1.0', '~1.0.0'); // return false\n * ```\n */\nexport const satisfies = (version, range) => {\n    // clean input\n    range = range.replace(/([><=]+)\\s+/g, '$1');\n    // handle multiple comparators\n    if (range.includes('||')) {\n        return range.split('||').some((r) => satisfies(version, r));\n    }\n    else if (range.includes(' - ')) {\n        const [a, b] = range.split(' - ', 2);\n        return satisfies(version, `>=${a} <=${b}`);\n    }\n    else if (range.includes(' ')) {\n        return range\n            .trim()\n            .replace(/\\s{2,}/g, ' ')\n            .split(' ')\n            .every((r) => satisfies(version, r));\n    }\n    // if no range operator then \"=\"\n    const m = range.match(/^([<>=~^]+)/);\n    const op = m ? m[1] : '=';\n    // if gt/lt/eq then operator compare\n    if (op !== '^' && op !== '~')\n        return compare(version, range, op);\n    // else range of either \"~\" or \"^\" is assumed\n    const [v1, v2, v3, , vp] = validateAndParse(version);\n    const [r1, r2, r3, , rp] = validateAndParse(range);\n    const v = [v1, v2, v3];\n    const r = [r1, r2 !== null && r2 !== void 0 ? r2 : 'x', r3 !== null && r3 !== void 0 ? r3 : 'x'];\n    // validate pre-release\n    if (rp) {\n        if (!vp)\n            return false;\n        if (compareSegments(v, r) !== 0)\n            return false;\n        if (compareSegments(vp.split('.'), rp.split('.')) === -1)\n            return false;\n    }\n    // first non-zero number\n    const nonZero = r.findIndex((v) => v !== '0') + 1;\n    // pointer to where segments can be >=\n    const i = op === '~' ? 2 : nonZero > 1 ? nonZero : 1;\n    // before pointer must be equal\n    if (compareSegments(v.slice(0, i), r.slice(0, i)) !== 0)\n        return false;\n    // after pointer must be >=\n    if (compareSegments(v.slice(i), r.slice(i)) === -1)\n        return false;\n    return true;\n};\n//# sourceMappingURL=satisfies.js.map","import { compareSegments, validateAndParse } from './utils';\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1, v2) => {\n    // validate input and split into segments\n    const n1 = validateAndParse(v1);\n    const n2 = validateAndParse(v2);\n    // pop off the patch\n    const p1 = n1.pop();\n    const p2 = n2.pop();\n    // validate numbers\n    const r = compareSegments(n1, n2);\n    if (r !== 0)\n        return r;\n    // validate pre-release\n    if (p1 && p2) {\n        return compareSegments(p1.split('.'), p2.split('.'));\n    }\n    else if (p1 || p2) {\n        return p1 ? -1 : 1;\n    }\n    return 0;\n};\n//# sourceMappingURL=compareVersions.js.map","import { FieldType, getFieldTypeFromValue, MutableDataFrame } from '@grafana/data';\n\n/**\n * Field Mapper\n */\ntype FieldMapper<ItemType> = {\n  name: string;\n  type: FieldType;\n  getValue: (item: ItemType) => unknown;\n};\n\n/**\n * Convert To Frame\n * @param name\n * @param refId\n * @param fields\n * @param items\n */\nexport const convertToFrame = <ItemType>({\n  name,\n  refId,\n  fields,\n  items,\n}: {\n  name: string;\n  refId: string;\n  fields: Array<FieldMapper<ItemType>>;\n  items: ItemType[];\n}): MutableDataFrame => {\n  /**\n   * Create frame\n   */\n  const frame = new MutableDataFrame({\n    name,\n    refId,\n    fields: fields.map(({ name, type }) => ({\n      name,\n      type,\n    })),\n  });\n\n  /**\n   * Add Data\n   */\n  items.forEach((item) => {\n    frame.appendRow([...fields.map(({ getValue }) => getValue(item))]);\n  });\n\n  return frame;\n};\n\n/**\n * Get Fields For Item\n */\nexport const getFieldsForItem = <ItemType extends object>(\n  item: ItemType,\n  override: Partial<{\n    [key in keyof typeof item]: (item: ItemType) => unknown;\n  }> = {}\n): Array<FieldMapper<ItemType>> => {\n  return Object.keys(item).reduce((acc: Array<FieldMapper<ItemType>>, name) => {\n    const getValue = override[name as keyof typeof item] || ((item) => item[name as keyof typeof item]);\n    const value = getValue(item);\n\n    return acc.concat({\n      name,\n      type: getFieldTypeFromValue(value),\n      getValue,\n    });\n  }, []);\n};\n","/**\n * Logger\n */\nconst createLogger = (name: string, logType: 'log' | 'error' | 'warn' = 'log') => {\n  return {\n    log: (...args: unknown[]) => {\n      // eslint-disable-next-line no-console\n      const logCommand = console[logType];\n      logCommand(`[${name}]: ${args}`);\n    },\n  };\n};\n\nexport const errorLogger = createLogger('Error', 'error');\n","import { AlertErrorPayload, AlertPayload, AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { errorLogger } from './logger';\n\n/**\n * Events\n */\nconst appEvents = getAppEvents();\n\n/**\n * Success Notification\n */\nexport const notifySuccess = (payload: AlertPayload) =>\n  appEvents.publish({ type: AppEvents.alertSuccess.name, payload });\n\n/**\n * Error Notification\n */\nexport const notifyError = (payload: AlertErrorPayload) => {\n  appEvents.publish({ type: AppEvents.alertError.name, payload });\n  errorLogger.log(payload);\n};\n","/**\n * Create No Supported Method\n */\nconst createNoSupportedMethod = (message: string) => () => Promise.reject(new Error(message));\n\n/**\n * Create Feature Method\n * @param method\n * @param isEnabled\n * @param noSupportedMessage\n */\nexport const createFeatureMethod = <TMethod>(\n  method: TMethod,\n  isEnabled = true,\n  noSupportedMessage = 'Feature is not available.'\n): TMethod => {\n  if (isEnabled) {\n    return method;\n  }\n\n  return createNoSupportedMethod(noSupportedMessage) as TMethod;\n};\n","import { Api } from './api';\n\n/**\n * Base Api\n */\nexport class BaseApi {\n  /**\n   * Constructor\n   */\n  constructor(protected readonly api: Api) {}\n}\n","import { lastValueFrom } from 'rxjs';\nimport { FieldType, formatLabels, Labels, MutableDataFrame, ScopedVars, TimeRange } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv } from '@grafana/runtime';\nimport { AnnotationDashboard, AnnotationRange, AnnotationType, Messages, RequestType } from '../constants';\nimport { AlertRule, Annotation, Query } from '../types';\nimport { notifyError } from '../utils';\nimport { BaseApi } from './base';\n\n/**\n * Annotations Api\n */\nexport class Annotations extends BaseApi {\n  /**\n   * Get Annotations\n   */\n  getAll = async (\n    query: Query,\n    range: TimeRange,\n    dashboardUID: string | undefined,\n    scopedVars: ScopedVars\n  ): Promise<Annotation[]> => {\n    let params: Record<string, any> = {};\n\n    /**\n     * Time Range\n     */\n    if (query.annotationRange === AnnotationRange.SELECTED) {\n      params.from = range.from.valueOf();\n      params.to = range.to.valueOf();\n    }\n\n    /**\n     * Dashboard\n     */\n    if (query.annotationDashboard === AnnotationDashboard.THIS && dashboardUID) {\n      params.dashboardUID = dashboardUID;\n    }\n\n    /**\n     * Max Limit\n     */\n    if (query.annotationLimit) {\n      params.limit = query.annotationLimit;\n    }\n\n    /**\n     * Filter Type\n     */\n    if (query.annotationType === AnnotationType.ALERT) {\n      params.type = AnnotationType.ALERT;\n    } else if (query.annotationType === AnnotationType.ANNOTATION) {\n      params.type = AnnotationType.ANNOTATION;\n    }\n\n    /**\n     * Fetch\n     */\n    const response = await lastValueFrom(\n      getBackendSrv().fetch({\n        method: 'GET',\n        params,\n        url: `${this.api.instanceSettings.url}/api/annotations`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getAnnotationsFailed]);\n      return [];\n    }\n\n    let annotations = response.data as Annotation[];\n\n    /**\n     * Filter Pattern\n     */\n    if (query.annotationPattern) {\n      const pattern = getTemplateSrv().replace(query.annotationPattern, scopedVars);\n      annotations = annotations.filter((annotation) => annotation.text?.match(pattern));\n    }\n\n    /**\n     * Filter Prev State\n     */\n    if (query.annotationPrevState) {\n      annotations = annotations.filter((annotation) => annotation.prevState === query.annotationPrevState);\n    }\n\n    /**\n     * Filter New State\n     */\n    if (query.annotationNewState) {\n      annotations = annotations.filter((annotation) => annotation.newState === query.annotationNewState);\n    }\n\n    return annotations;\n  };\n\n  /**\n   * Get Annotations Frame\n   */\n  getFrame = async (\n    query: Query,\n    range: TimeRange,\n    dashboardUID: string | undefined,\n    scopedVars: ScopedVars\n  ): Promise<MutableDataFrame[]> => {\n    const annotations = await this.getAll(query, range, dashboardUID, scopedVars);\n    if (!annotations.length) {\n      return [];\n    }\n\n    /**\n     * Fields\n     */\n    const fields = [\n      {\n        name: 'Id',\n        type: FieldType.number,\n      },\n      {\n        name: 'Alert Id',\n        type: FieldType.number,\n      },\n      {\n        name: 'Dashboard Id',\n        type: FieldType.number,\n      },\n      {\n        name: 'Dashboard UID',\n        type: FieldType.string,\n      },\n      {\n        name: 'Panel Id',\n        type: FieldType.number,\n      },\n      {\n        name: 'Time',\n        type: FieldType.time,\n      },\n      {\n        name: 'Time End',\n        type: FieldType.time,\n      },\n      {\n        name: 'Login',\n        type: FieldType.string,\n      },\n      {\n        name: 'Email',\n        type: FieldType.string,\n      },\n      {\n        name: 'Avatar URL',\n        type: FieldType.string,\n      },\n      {\n        name: 'Tags',\n        type: FieldType.string,\n      },\n      {\n        name: 'Text',\n        type: FieldType.string,\n      },\n      {\n        name: 'Prev State',\n        type: FieldType.string,\n      },\n      {\n        name: 'New State',\n        type: FieldType.string,\n      },\n      {\n        name: 'Labels',\n        type: FieldType.string,\n      },\n      {\n        name: 'Values',\n        type: FieldType.string,\n      },\n    ];\n\n    /**\n     * Alert Rules if enabled\n     */\n    const alertRules: { [id: number]: AlertRule } = {};\n    if (query.annotationRules !== false && query.annotationType !== AnnotationType.ANNOTATION) {\n      const rules = await this.api.features.provisioning.getAlertRules().catch(() => []);\n      rules.forEach((rule) => (alertRules[rule.id] = rule));\n\n      /**\n       * Add fields\n       */\n      fields.push(\n        {\n          name: 'Alert Name',\n          type: FieldType.string,\n        },\n        {\n          name: 'Alert UID',\n          type: FieldType.string,\n        }\n      );\n    }\n\n    /**\n     * Create frame\n     */\n    const frame = new MutableDataFrame({\n      name: RequestType.ANNOTATIONS,\n      refId: query.refId,\n      fields,\n    });\n\n    /**\n     * Add Data\n     */\n    annotations.forEach((annotation) => {\n      let formattedLabels = '{}';\n      let formattedValues = '';\n      const text = annotation.text?.match(/{([^}]+)} - ([^}]*)/);\n\n      /**\n       * Parse Labels\n       */\n      if (text?.length && text[1]) {\n        const labels = {} as Labels;\n        const pairs = text[1].split(', ');\n\n        pairs.forEach((pair) => {\n          const keyValue = pair.split('=');\n          if (!keyValue.length) {\n            return;\n          }\n\n          labels[keyValue[0]] = keyValue[1] || '';\n        });\n\n        formattedLabels = formatLabels(labels);\n      }\n\n      /**\n       * Parse Values\n       */\n      if (text?.length && text[2]) {\n        formattedValues = text[2];\n      }\n\n      const row = [\n        annotation.id,\n        annotation.alertId,\n        annotation.dashboardId,\n        annotation.dashboardUID,\n        annotation.panelId,\n        annotation.time,\n        annotation.timeEnd,\n        annotation.login,\n        annotation.email,\n        annotation.avatarUrl,\n        annotation.tags?.join(','),\n        annotation.text,\n        annotation.prevState,\n        annotation.newState,\n        formattedLabels,\n        formattedValues,\n      ];\n\n      if (query.annotationRules !== false && query.annotationType !== AnnotationType.ANNOTATION) {\n        const alertTitle =\n          annotation.alertId && alertRules[annotation.alertId] ? alertRules[annotation.alertId].title : '';\n        const alertUID = annotation.alertId && alertRules[annotation.alertId] ? alertRules[annotation.alertId].uid : '';\n\n        row.push(alertTitle, alertUID);\n      }\n\n      frame.appendRow(row);\n    });\n\n    return [frame];\n  };\n}\n","import { lastValueFrom } from 'rxjs';\nimport { DataSourceSettings, FieldType, MutableDataFrame } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Messages, RequestType } from '../constants';\nimport { Query } from '../types';\nimport { convertToFrame, notifyError } from '../utils';\nimport { BaseApi } from './base';\n\n/**\n * Data Sources Api\n */\nexport class DataSources extends BaseApi {\n  /**\n   * Get Data Sources\n   */\n  getAll = async (): Promise<DataSourceSettings[]> => {\n    /**\n     * Fetch\n     */\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<DataSourceSettings[]>({\n        method: 'GET',\n        url: `${this.api.instanceSettings.url}/api/datasources`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getDataSourcesFailed]);\n      return [];\n    }\n\n    return response.data;\n  };\n\n  /**\n   * Get Data Sources Frame\n   */\n  getFrame = async (query: Query): Promise<MutableDataFrame[]> => {\n    const datasources = await this.getAll();\n    if (!datasources.length) {\n      return [];\n    }\n\n    /**\n     * Create Frame\n     */\n    const frame = convertToFrame<DataSourceSettings>({\n      name: RequestType.DATASOURCES,\n      refId: query.refId,\n      fields: [\n        {\n          name: 'Id',\n          type: FieldType.number,\n          getValue: (item) => item.id,\n        },\n        {\n          name: 'Org Id',\n          type: FieldType.number,\n          getValue: (item) => item.orgId,\n        },\n        {\n          name: 'UID',\n          type: FieldType.string,\n          getValue: (item) => item.uid,\n        },\n        {\n          name: 'Name',\n          type: FieldType.string,\n          getValue: (item) => item.name,\n        },\n        {\n          name: 'Type',\n          type: FieldType.string,\n          getValue: (item) => item.type,\n        },\n        {\n          name: 'Type Logo URL',\n          type: FieldType.string,\n          getValue: (item) => item.typeLogoUrl,\n        },\n        {\n          name: 'Type Name',\n          type: FieldType.string,\n          getValue: (item) => item.typeName,\n        },\n        {\n          name: 'Is Default',\n          type: FieldType.boolean,\n          getValue: (item) => item.isDefault,\n        },\n        {\n          name: 'Read Only',\n          type: FieldType.boolean,\n          getValue: (item) => item.readOnly,\n        },\n        {\n          name: 'URL',\n          type: FieldType.string,\n          getValue: (item) => item.url,\n        },\n        {\n          name: 'User',\n          type: FieldType.string,\n          getValue: (item) => item.user,\n        },\n      ],\n      items: datasources,\n    });\n\n    return [frame];\n  };\n}\n","import { lastValueFrom } from 'rxjs';\nimport { FieldType, MutableDataFrame } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Messages, RequestType } from '../constants';\nimport { Health as HealthType, Query } from '../types';\nimport { convertToFrame, notifyError } from '../utils';\nimport { BaseApi } from './base';\n\n/**\n * Health Api\n */\nexport class Health extends BaseApi {\n  /**\n   * Get Health\n   */\n  get = async (): Promise<HealthType | undefined> => {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<HealthType>({\n        method: 'GET',\n        url: `${this.api.instanceSettings.url}/api/health`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getHealthFailed]);\n      return;\n    }\n\n    /**\n     * Data received\n     */\n    return response.data;\n  };\n\n  /**\n   * Get Health Frame\n   */\n  getFrame = async (query: Query): Promise<MutableDataFrame[]> => {\n    const health = await this.get();\n    if (!health?.version) {\n      return [];\n    }\n\n    /**\n     * Create Frame\n     */\n    const frame = convertToFrame<HealthType>({\n      name: RequestType.HEALTH,\n      refId: query.refId,\n      fields: [\n        {\n          name: 'Commit',\n          type: FieldType.string,\n          getValue: (item) => item.commit,\n        },\n        {\n          name: 'Database',\n          type: FieldType.string,\n          getValue: (item) => item.database,\n        },\n        {\n          name: 'Version',\n          type: FieldType.string,\n          getValue: (item) => item.version,\n        },\n      ],\n      items: [health],\n    });\n\n    return [frame];\n  };\n}\n","import { lastValueFrom } from 'rxjs';\nimport { MutableDataFrame, OrgProps } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Messages, RequestType } from '../constants';\nimport { OrgUser, Query } from '../types';\nimport { convertToFrame, getFieldsForItem, notifyError } from '../utils';\nimport { BaseApi } from './base';\n\n/**\n * Org Api\n */\nexport class Org extends BaseApi {\n  /**\n   * Get Org\n   */\n  get = async (): Promise<OrgProps | undefined> => {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch({\n        method: 'GET',\n        url: `${this.api.instanceSettings.url}/api/org`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getOrgFailed]);\n      return;\n    }\n\n    /**\n     * Data received\n     */\n    return response.data as OrgProps;\n  };\n\n  /**\n   * Get Users\n   */\n  getUsers = async (): Promise<OrgUser[]> => {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<OrgUser[]>({\n        method: 'GET',\n        url: `${this.api.instanceSettings.url}/api/org/users`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getUsersFailed]);\n      return [];\n    }\n\n    /**\n     * Data received\n     */\n    return response.data;\n  };\n\n  /**\n   * Get Users Frame\n   */\n  getUsersFrame = async (query: Query): Promise<MutableDataFrame[]> => {\n    const items = await this.getUsers();\n    if (!items.length) {\n      return [];\n    }\n\n    const frame = convertToFrame<OrgUser>({\n      name: RequestType.ORG_USERS,\n      refId: query.refId,\n      fields: getFieldsForItem(items[0]),\n      items,\n    });\n\n    return [frame];\n  };\n}\n","import { lastValueFrom } from 'rxjs';\nimport { FieldType, MutableDataFrame } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Messages, RequestType } from '../constants';\nimport { AlertRule, Query } from '../types';\nimport { convertToFrame, notifyError } from '../utils';\nimport { Api } from './api';\nimport { BaseApi } from './base';\n\n/**\n * Provisioning Api\n */\nexport class Provisioning extends BaseApi {\n  constructor(api: Api) {\n    super(api);\n  }\n\n  /**\n   * Get Alert Rules\n   */\n  getAlertRules = async (): Promise<AlertRule[]> => {\n    /**\n     * Fetch\n     */\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<AlertRule[]>({\n        method: 'GET',\n        url: `${this.api.instanceSettings.url}/api/v1/provisioning/alert-rules`,\n      })\n    );\n\n    /**\n     * Check Response\n     */\n    if (!response || !response.data) {\n      notifyError([Messages.error, Messages.api.getAlertRulesFailed]);\n      return [];\n    }\n\n    return response.data;\n  };\n\n  /**\n   * Get Alert Rules Frame\n   */\n  getAlertRulesFrame = async (query: Query): Promise<MutableDataFrame[]> => {\n    const rules = await this.getAlertRules();\n    if (!rules.length) {\n      return [];\n    }\n\n    /**\n     * Create frame\n     */\n    const frame = convertToFrame<AlertRule>({\n      name: RequestType.ALERT_RULES,\n      refId: query.refId,\n      fields: [\n        {\n          name: 'Id',\n          type: FieldType.number,\n          getValue: (item) => item.id,\n        },\n        {\n          name: 'UID',\n          type: FieldType.string,\n          getValue: (item) => item.uid,\n        },\n        {\n          name: 'Org Id',\n          type: FieldType.number,\n          getValue: (item) => item.orgID,\n        },\n        {\n          name: 'Rule Group',\n          type: FieldType.string,\n          getValue: (item) => item.ruleGroup,\n        },\n        {\n          name: 'Title',\n          type: FieldType.string,\n          getValue: (item) => item.title,\n        },\n        {\n          name: 'Updated',\n          type: FieldType.time,\n          getValue: (item) => item.updated,\n        },\n        {\n          name: 'Folder UID',\n          type: FieldType.string,\n          getValue: (item) => item.folderUID,\n        },\n        {\n          name: 'Paused',\n          type: FieldType.boolean,\n          getValue: (item) => item.isPaused,\n        },\n        {\n          name: 'Evaluate For',\n          type: FieldType.string,\n          getValue: (item) => item.for,\n        },\n      ],\n      items: rules,\n    });\n\n    return [frame];\n  };\n}\n","import { satisfies } from 'compare-versions';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { RequestType } from '../constants';\nimport { DataSourceOptions, FeatureApi } from '../types';\nimport { createFeatureMethod } from '../utils';\nimport { Annotations } from './annotations';\nimport { DataSources } from './datasources';\nimport { Health } from './health';\nimport { Org } from './org';\nimport { Provisioning } from './provisioning';\n\n/**\n * API\n */\nexport class Api {\n  /**\n   * All\n   * @protected\n   */\n  private all = {\n    /**\n     * Provisioning Api\n     */\n    provisioning: new Provisioning(this),\n\n    /**\n     * Annotations Api\n     */\n    annotations: new Annotations(this),\n\n    /**\n     * Data Sources Api\n     */\n    datasources: new DataSources(this),\n\n    /**\n     * Health Api\n     */\n    health: new Health(this),\n\n    /**\n     * Org Api\n     */\n    org: new Org(this),\n  };\n\n  features: {\n    provisioning: FeatureApi<Provisioning>;\n    annotations: FeatureApi<Annotations>;\n    datasources: FeatureApi<DataSources>;\n    health: FeatureApi<Health>;\n    org: FeatureApi<Org>;\n  };\n\n  availableRequestTypes: RequestType[];\n\n  /**\n   * Constructor\n   */\n  constructor(\n    public instanceSettings: DataSourceInstanceSettings<DataSourceOptions>,\n    private targetInfo?: { version?: string }\n  ) {\n    /**\n     * Available Request Types\n     */\n    const requestTypes = [RequestType.HEALTH, RequestType.DATASOURCES, RequestType.ANNOTATIONS, RequestType.ORG_USERS];\n\n    /**\n     * Target Grafana Version\n     */\n    const version = this.targetInfo?.version || '0.0.0';\n\n    /**\n     * Grafana Versions\n     */\n    const isGrafana10AndHigher = satisfies(version, '>=10.*');\n    if (isGrafana10AndHigher) {\n      requestTypes.push(RequestType.ALERT_RULES);\n    }\n\n    /**\n     * Set Available Request Types\n     */\n    this.availableRequestTypes = requestTypes;\n\n    /**\n     * Available Features\n     */\n    this.features = {\n      provisioning: {\n        getAlertRules: createFeatureMethod(\n          this.all.provisioning.getAlertRules,\n          isGrafana10AndHigher,\n          'Alert Rules are supported since Grafana 10.'\n        ),\n        getAlertRulesFrame: createFeatureMethod(\n          this.all.provisioning.getAlertRulesFrame,\n          isGrafana10AndHigher,\n          'Alert Rules are supported since Grafana 10.'\n        ),\n      },\n      annotations: {\n        getAll: createFeatureMethod(this.all.annotations.getAll),\n        getFrame: createFeatureMethod(this.all.annotations.getFrame),\n      },\n      datasources: {\n        getAll: createFeatureMethod(this.all.datasources.getAll),\n        getFrame: createFeatureMethod(this.all.datasources.getFrame),\n      },\n      health: {\n        /**\n         * Get Health should be always enabled to pass health check\n         */\n        get: createFeatureMethod(this.all.health.get),\n        getFrame: createFeatureMethod(this.all.health.getFrame),\n      },\n      org: {\n        get: createFeatureMethod(this.all.org.get),\n        getUsers: createFeatureMethod(this.all.org.getUsers),\n        getUsersFrame: createFeatureMethod(this.all.org.getUsersFrame),\n      },\n    };\n  }\n}\n","import { DataSourceVariableSupport } from '@grafana/data';\nimport { Query } from '../types';\nimport { DataSource } from './datasource';\n\n/**\n * Variable Support\n */\nexport class VariableSupport extends DataSourceVariableSupport<DataSource, Query> {\n  constructor() {\n    super();\n  }\n}\n","import {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { Api } from '../api';\nimport { DataSourceTestStatus, Messages, RequestMode, RequestType } from '../constants';\nimport { DataSourceOptions, Health, Query } from '../types';\nimport { VariableSupport } from './variable';\n\n/**\n * Data Source\n */\nexport class DataSource extends DataSourceApi<Query, DataSourceOptions> {\n  /**\n   * Api\n   *\n   * @type {Api} api\n   */\n  api: Api;\n\n  /**\n   * Target Info\n   */\n  private targetInfo: { version: string } | undefined;\n\n  /**\n   * Get Target Promise\n   */\n  private getTargetPromise: Promise<[Health | undefined]> | null = null;\n\n  /**\n   * Constructor\n   */\n  constructor(private instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {\n    super(instanceSettings);\n    this.api = new Api({\n      ...instanceSettings,\n      url: instanceSettings.jsonData.requestMode === RequestMode.LOCAL ? '' : instanceSettings.url,\n    });\n    this.annotations = {};\n    this.variables = new VariableSupport();\n  }\n\n  /**\n   * Api Initialization\n   * @private\n   */\n  private async initApi() {\n    /**\n     * Get All Info for Initialization\n     */\n    this.getTargetPromise = Promise.all([this.api.features.health.get()]);\n\n    /**\n     * Get Health\n     */\n    const [health] = await this.getTargetPromise;\n    if (!health) {\n      throw new Error('Unable to get Health data.');\n    }\n\n    /**\n     * Set Target Info\n     */\n    this.targetInfo = {\n      version: health.version,\n    };\n\n    /**\n     * Initialize API\n     */\n    this.api = new Api(\n      {\n        ...this.instanceSettings,\n        url: this.instanceSettings.jsonData.requestMode === RequestMode.LOCAL ? '' : this.instanceSettings.url,\n      },\n      this.targetInfo\n    );\n\n    /**\n     * Clear promise\n     */\n    this.getTargetPromise = null;\n  }\n\n  /**\n   * Query\n   */\n  async query(options: DataQueryRequest<Query>): Promise<DataQueryResponse> {\n    const data: DataFrame[] = [];\n    const { range, dashboardUID } = options;\n\n    /**\n     * Once Initialize Api\n     */\n    if (!this.targetInfo) {\n      if (!this.getTargetPromise) {\n        await this.initApi();\n      } else {\n        await this.getTargetPromise;\n      }\n    }\n\n    /**\n     * Process targets\n     */\n    await Promise.all(\n      options.targets.map(async (target) => {\n        let frames: MutableDataFrame[] = [];\n\n        /**\n         * Request Types\n         */\n        switch (target.requestType) {\n          case RequestType.ALERT_RULES:\n            frames = await this.api.features.provisioning.getAlertRulesFrame(target);\n            break;\n          case RequestType.ANNOTATIONS:\n            frames = await this.api.features.annotations.getFrame(target, range, dashboardUID, options.scopedVars);\n            break;\n          case RequestType.DATASOURCES:\n            frames = await this.api.features.datasources.getFrame(target);\n            break;\n          case RequestType.HEALTH:\n            frames = await this.api.features.health.getFrame(target);\n            break;\n          case RequestType.ORG_USERS:\n            frames = await this.api.features.org.getUsersFrame(target);\n            break;\n        }\n\n        if (!frames || !frames.length) {\n          return;\n        }\n\n        /**\n         * Add Frames\n         */\n        data.push(...frames);\n      })\n    );\n\n    /**\n     * Return data\n     */\n    return { data };\n  }\n\n  /**\n   * Health Check\n   */\n  async testDatasource() {\n    /**\n     * Check Health\n     */\n    const health = await this.api.features.health.get();\n    const org = await this.api.features.org.get();\n\n    /**\n     * Connected\n     */\n    if (health?.version && org?.name) {\n      return {\n        status: DataSourceTestStatus.SUCCESS,\n        message: `${Messages.connectedToOrg} ${org.name}. ${Messages.version} ${health.version}`,\n      };\n    }\n\n    /**\n     * Return\n     */\n    return {\n      status: DataSourceTestStatus.ERROR,\n      message: Messages.connectionError,\n    };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor, QueryEditor } from './components';\nimport { DataSource } from './datasource';\nimport { DataSourceOptions, Query } from './types';\n\n/**\n * Datasource Plugin\n */\nexport const plugin = new DataSourcePlugin<DataSource, Query, DataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent, useCallback, useEffect } from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { FieldSet, InlineField, InlineFieldRow, Input, RadioButtonGroup } from '@grafana/ui';\nimport { RequestMode, RequestModeOptions, TestIds } from '../../constants';\nimport { DataSourceOptions, SecureJsonData } from '../../types';\n\n/**\n * Editor Properties\n */\ninterface Props extends DataSourcePluginOptionsEditorProps<DataSourceOptions, SecureJsonData> {}\n\n/**\n * Config Editor\n */\nexport const ConfigEditor: React.FC<Props> = ({ onOptionsChange, options }) => {\n  /**\n   * Request Mode Change\n   */\n  const onRequestModeChange = useCallback(\n    (value: RequestMode) => {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          requestMode: value,\n        },\n      });\n    },\n    [onOptionsChange, options]\n  );\n\n  /**\n   * API URL Change\n   */\n  const onUrlChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          url: event.target.value,\n        },\n      });\n    },\n    [onOptionsChange, options]\n  );\n\n  /**\n   * Token Change\n   */\n  const onTokenChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      onOptionsChange({\n        ...options,\n        secureJsonData: {\n          token: event.target.value,\n        },\n      });\n    },\n    [onOptionsChange, options]\n  );\n\n  /**\n   * Render\n   */\n  const { jsonData, secureJsonFields } = options;\n  const secureJsonData = (options.secureJsonData || {}) as SecureJsonData;\n\n  /**\n   * Set default mode as Remote\n   */\n  useEffect(() => {\n    if (!jsonData.requestMode) {\n      onRequestModeChange(RequestMode.REMOTE);\n    }\n  }, [jsonData.requestMode, onRequestModeChange]);\n\n  return (\n    <FieldSet>\n      <InlineFieldRow>\n        <InlineField label=\"Request Mode\" labelWidth={14} grow data-testid={TestIds.configEditor.fieldRequestMode}>\n          <RadioButtonGroup value={jsonData.requestMode} options={RequestModeOptions} onChange={onRequestModeChange} />\n        </InlineField>\n      </InlineFieldRow>\n\n      {jsonData.requestMode === RequestMode.REMOTE && (\n        <>\n          <InlineFieldRow>\n            <InlineField label=\"Grafana URL\" labelWidth={14} grow>\n              <Input\n                type=\"text\"\n                placeholder=\"http://localhost:3000\"\n                value={jsonData.url}\n                onChange={onUrlChange}\n                data-testid={TestIds.configEditor.fieldUrl}\n              />\n            </InlineField>\n          </InlineFieldRow>\n\n          <InlineFieldRow>\n            <InlineField label=\"Token\" labelWidth={14} grow>\n              <Input\n                type=\"password\"\n                placeholder={secureJsonFields?.token ? 'configured' : ''}\n                value={secureJsonData.token ?? ''}\n                onChange={onTokenChange}\n                data-testid={TestIds.configEditor.fieldToken}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </>\n      )}\n    </FieldSet>\n  );\n};\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","TestIds","name","AnnotationType","ALL","ANNOTATION","ALERT","AnnotationDashboard","THIS","AnnotationRange","NONE","SELECTED","AnnotationState","NORMAL","PENDING","ALERTING","AnnotationTypeOptions","label","ariaLabel","icon","AnnotationDashboardOptions","AnnotationRangeOptions","AnnotationStateOptions","AnnotationRulesOptions","DataSourceTestStatus","SUCCESS","ERROR","RequestMode","LOCAL","REMOTE","RequestModeOptions","Messages","RequestType","ALERT_RULES","ANNOTATIONS","DATASOURCES","HEALTH","ORG_USERS","RequestTypeOptions","description","DefaultQuery","annotationDashboard","annotationLimit","annotationNewState","annotationPattern","annotationPrevState","annotationRange","annotationRules","annotationType","requestType","semver","validateAndParse","version","TypeError","match","Error","shift","isWildcard","s","tryParse","v","parseInt","isNaN","compareStrings","b","ap","bp","String","forceType","compareSegments","i","Math","max","length","operatorResMap","allowedOperators","keys","assertValidOperator","op","indexOf","join","satisfies","range","replace","includes","split","some","trim","every","m","v1","v2","operator","res","n1","n2","p1","pop","p2","compareVersions","compare","v3","vp","r1","r2","r3","rp","nonZero","findIndex","slice","convertToFrame","refId","fields","items","frame","MutableDataFrame","map","type","forEach","item","appendRow","getValue","getFieldsForItem","override","reduce","acc","concat","getFieldTypeFromValue","errorLogger","logType","log","args","logCommand","console","createLogger","appEvents","getAppEvents","notifyError","payload","publish","AppEvents","alertError","createFeatureMethod","method","isEnabled","noSupportedMessage","message","Promise","reject","BaseApi","constructor","api","Annotations","getAll","query","dashboardUID","scopedVars","params","from","valueOf","to","limit","response","lastValueFrom","getBackendSrv","fetch","url","instanceSettings","data","annotations","pattern","getTemplateSrv","filter","annotation","text","prevState","newState","getFrame","FieldType","number","string","time","alertRules","features","provisioning","getAlertRules","catch","rule","id","push","formattedLabels","formattedValues","labels","pair","keyValue","formatLabels","row","alertId","dashboardId","panelId","timeEnd","login","email","avatarUrl","tags","alertTitle","title","alertUID","uid","DataSources","datasources","orgId","typeLogoUrl","typeName","boolean","isDefault","readOnly","user","Health","health","commit","database","Org","getUsers","getUsersFrame","Provisioning","super","getAlertRulesFrame","rules","orgID","ruleGroup","updated","folderUID","isPaused","for","Api","targetInfo","all","availableRequestTypes","this","org","requestTypes","isGrafana10AndHigher","VariableSupport","DataSourceVariableSupport","DataSource","DataSourceApi","getTargetPromise","jsonData","requestMode","options","initApi","targets","target","frames","status","variables","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","secureJsonFields","onRequestModeChange","useCallback","onUrlChange","event","onTokenChange","secureJsonData","token","useEffect","FieldSet","InlineFieldRow","InlineField","labelWidth","grow","data-testid","RadioButtonGroup","onChange","Input","placeholder","setQueryEditor","onRunQuery","rawQuery","datasource","isInitialized","setInitialized","useState","onRequestTypeChange","onAnnotationTypeChange","onAnnotationDashboardChange","onAnnotationRulesChange","onAnnotationRangeChange","onAnnotationPatternChange","currentTarget","onAnnotationLimitChange","Number","onAnnotationPrevStateChange","onAnnotationNewStateChange","defaults","useMemo","option","supported","Select","aria-label","find","tooltip"],"sourceRoot":""}